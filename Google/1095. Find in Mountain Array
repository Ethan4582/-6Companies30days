// Time: O(logN)
// Space: O(1)
class Solution {
    int binarySearch(int target, MountainArray &A, int L, int R, int dir) {
        while (L <= R) {
            int M = (L + R) / 2, val = A.get(M);
            if (val == target) return M;
            bool left = (dir == 1 && val < target) || (dir == -1 && val > target);
            if (left) L = M + 1;
            else R = M - 1;
        }
        return -1;
    }
    int findTop(MountainArray &A, int N) {
        int L = 0, R = N - 1;
        while (L <= R) {
            int M = (L + R) / 2, left = M - 1 >= 0 ? A.get(M - 1) : INT_MIN, val = A.get(M), right = M + 1 < N ? A.get(M + 1) : INT_MIN;
            if (val > left && val > right) return M;
            else if (val < left) R = M - 1;
            else L = M + 1;
        }
        return -1;
    }
public:
    int findInMountainArray(int target, MountainArray &A) {
        int N = A.length(), top = findTop(A, N), a = binarySearch(target, A, 0, top, 1);
        return a != -1 ? a : binarySearch(target, A, top + 1, N - 1, -1);
    }
};