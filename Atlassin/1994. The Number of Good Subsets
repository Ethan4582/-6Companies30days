constexpr long mod = 1000000007;
int mask[31] = { -1, 0, 1, 2, -1, 4, 3, 8, -1, -1, 5, 16, -1, 32, 9, 6, -1, 64, -1, 128, -1, 10, 17, 256, -1, -1, 33, -1, -1, 512, 7 };
class Solution {
public:
    int numberOfGoodSubsets(vector<int>& A) {
        long dp[1025] = { 1 }, cnt[31] = {};
        for (int n : A) ++cnt[n];
        for (int i = 2; i <= 30; ++i) {
            if (mask[i] == -1 || cnt[i] == 0) continue;
            for (int mi = mask[i], mj = 0; mj < 1024; ++mj) {
                dp[mi | mj] = (dp[mi | mj] + cnt[i] * dp[mj] * ((mi & mj) == 0)) % mod;
            }
        }
        int ans = accumulate(begin(dp) + 1, end(dp), 0, [](int s, int n) { return (s + n) % mod; });
        while (cnt[1]--) ans = (ans << 1) % mod;
        return ans;
    }
};