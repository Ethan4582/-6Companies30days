

Time Complexity : O(n logn) for sort + O(n) for loop = O(n logn)
Space complexity : O(1)

class Solution {
public:
    int minMoves2(vector<int>& nums) {
        int n = nums.size(), ans = 0;
        sort(nums.begin(), nums.end());
        int median = nums[n/2]; // Finding median
        for(int i=0; i<n; i++){
            ans += abs(nums[i] - median); 
        }
        return ans;
    }
};


class Solution {
public:
    int minMoves2(vector<int>& nums) {
        int n = nums.size(), ans = 0;
        nth_element(nums.begin(), nums.begin()+(n/2), nums.end()); // virtually sort the array 
        int median = nums[n/2]; 
        for(int i=0; i<n; i++){
            ans += abs(nums[i] - median); 
        }
        return ans;
    }
};

Time Complexity : O(n) for finding median + O(n) for loop = O(n) 

Space complexity : O(1)