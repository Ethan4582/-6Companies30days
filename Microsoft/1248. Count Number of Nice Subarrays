
class Solution {
public:
    int numberOfSubarrays(vector<int>& n, int k) {
        return solve(n,k) - solve(n, k-1);
    }
private:
    int solve(vector<int>& n, int k) {
        int l=0, wsz=0, ans=0;

        for(int r=0; r<n.size(); r++){
            // keep add the num of ood number 
            wsz+=n[r]%2;
            while(wsz>k){
                wsz-=n[l]%2;// oddd number
                l++;
            }
            ans+=r-l+1;
        }
        return ans;

    }
};

Time complexity: O(n)
Space complexity: O(1)



class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
        int subarrays = 0, initialGap = 0, qsize = 0, start = 0;
        for (int end = 0; end < nums.size(); end++) {
            // If current element is odd, increment qsize by 1.
            if (nums[end] % 2 == 1) {
                qsize++;
            }
            // If qsize is k, calculate initialGap and add it in the answer.
            if (qsize == k) {
                initialGap = 0;
                // Calculate the number of even elements in the beginning of
                // subarray.
                while (qsize == k) {
                    qsize -= nums[start] % 2;
                    initialGap++;
                    start++;
                }
            }
            subarrays += initialGap;
        }

        return subarrays;
    }
};




class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
        
        int ans = 0; 
        for(int i = 0; i < nums.size(); i++) {
            int subcnt = 0, oddCount = 0; // Count of odd numbers
            for(int j = i; j < nums.size(); j++) {
                if(nums[j] % 2 != 0) {
                    oddCount++; // Increment odd count
                }
                if(oddCount == k) {
                    subcnt++; // Count valid subarrays
                }
            }
            ans += subcnt; // Add to total
        }

        return ans;
    }
}; // Time complexity: O(n^2), Space complexity: O(1)
