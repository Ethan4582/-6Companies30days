class Solution {
public:
    int maxProfit(int k, vector<int>& prc) {
        int n = prc.size();
        int b = INT_MAX;
        vector<pair<int, int>> arr;
        for(int i=0;i<n;i++){
            if(prc[i]<=b){
                b = prc[i];
            }else{
                while(i<n-1 && prc[i+1]>=prc[i]){
                    i++;
                }
                arr.push_back({b, prc[i]});
                b = prc[i];
            }
        }
        while(arr.size()>k){
            int mdi = -1, mn = INT_MAX;
        
            for(int i=1;i<arr.size();i++){
                if(arr[i].second >= arr[i-1].second && arr[i-1].second-arr[i].first < mn){
                    mdi = i;
                    mn = arr[i-1].second-arr[i].first;
                }
            }
            
            int mni = 0;
            for(int i=1;i<arr.size();i++){
                if((arr[i].second-arr[i].first)<(arr[mni].second-arr[mni].first)){
                    mni = i;
                }
            }
          
            if(arr[mni].second-arr[mni].first < mn){
                arr.erase(arr.begin()+mni);
            }else{
                arr[mdi-1].second = arr[mdi].second;
                arr.erase(arr.begin()+mdi);
            }            
        }

        long int ans = 0;
        for(auto p:arr)
            ans+=p.second-p.first;
        return ans;
    }
};