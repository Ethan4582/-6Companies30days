class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        long long ans = 0;
        int cnt = 0;
        unordered_map<int, int> m;
        long long sum = 0;
        for(int i=0;i<nums.size();i++) {
            sum += nums[i];
            m[nums[i]]++;
            if(m[nums[i]]==1) {
                cnt++;
            } else if(m[nums[i]]==2) {
                cnt--;
            }
            if((i+1)>=k) {
                if(i-k>=0) {
                    sum -= nums[i-k];
                    m[nums[i-k]]--;
                    if(m[nums[i-k]]==1) {
                        cnt++;
                    } else if(m[nums[i-k]]==0) {
                        cnt--;
                    }
                }
                if(cnt == k) {
                    ans = max(ans, sum);
                }
            }
        }

        return ans;
    }
};