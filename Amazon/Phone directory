// User function Template for C++

class Solution {
    struct TrieNode {
        unordered_map<char, TrieNode*> child;
        bool isLast;
        TrieNode() {
            for (char i = 'a'; i <= 'z'; i++) child[i] = NULL;
            isLast = false;
        }
    };

    TrieNode* root;

    void insert(string s) {
        TrieNode* itr = root;
        for (int i = 0; i < s.length(); i++) {
            TrieNode* nextNode = itr->child[s[i]];
            if (nextNode == NULL) {
                nextNode = new TrieNode();
                itr->child[s[i]] = nextNode;
            }
            itr = nextNode;
            if (i == s.length() - 1) itr->isLast = true;
        }
    }

    void searchPrefix(TrieNode* curNode, string prefix, vector<string>& result) {
        if (curNode->isLast) result.push_back(prefix);
        for (char i = 'a'; i <= 'z'; i++) {
            TrieNode* nextNode = curNode->child[i];
            if (nextNode != NULL) searchPrefix(nextNode, prefix + i, result);
        }
    }

public:
    vector<vector<string>> displayContacts(int n, string contact[], string s) {
        root = new TrieNode();
        for (int i = 0; i < n; i++) insert(contact[i]);

        vector<vector<string>> suggestions;
        TrieNode* prevNode = root;
        string prefix = "";

        for (int i = 0; i < s.length(); i++) {
            prefix += s[i];
            TrieNode* curNode = prevNode->child[s[i]];
            if (curNode == NULL) {
                for (int j = i; j < s.length(); j++) suggestions.push_back({"0"});
                break;
            }
            vector<string> currentSuggestions;
            searchPrefix(curNode, prefix, currentSuggestions);
            suggestions.push_back(currentSuggestions);
            prevNode = curNode;
        }
        return suggestions;
    }
};